
#version 460 core

#extension GL_ARB_compute_variable_group_size : enable

layout( local_size_variable ) in;

restrict layout(binding = 0, std430) buffer frustumBuffer {
	vec4 planes[];
};

layout(binding = 1, std430) buffer uniforms {
	mat4 InverseProjection;
	vec2 ScreenDimensions;
};

vec4 computePlane(in vec3 _p0, in vec3 _p1, in vec3 _p2) {
    vec3 v0 = _p1 - _p0;
    vec3 v2 = _p2 - _p0;
	vec3 nor = normalize(cross(v0, v2));  
    return vec4(nor, dot(nor, _p0));
}

// Convert clip space coordinates to view space
vec4 clipToView(in vec4 _clip) {
    // View space position.
    vec4 view = InverseProjection * _clip;
    // Perspective projection.
    return  view / view.w;
}
 
// Convert screen space coordinates to view space.
vec4 screenToView(in vec4 _screen) {
    // Convert to normalized texture coordinates
    vec2 texCoord = _screen.xy / ScreenDimensions; 
    // Convert to clip space
    return clipToView(vec4(vec2(texCoord.x, 1.0 - texCoord.y) * 2.0 - 1.0, _screen.z, _screen.w));
}

void main() {
	// View space eye position is always at the origin.
    const vec3 eyePos = vec3(0, 0, 0);
 
    vec4 screenSpace[4];
    // Top left point
    screenSpace[0] = vec4(gl_WorkGroupID.xy * 32, -1.0, 1.0 );
    // Top right point
    screenSpace[1] = vec4(vec2( gl_WorkGroupID.x + 1, gl_WorkGroupID.y ) * 32, -1.0, 1.0);
    // Bottom left point
    screenSpace[2] = vec4(vec2( gl_WorkGroupID.x, gl_WorkGroupID.y + 1 ) * 32, -1.0, 1.0);
    // Bottom right point
    screenSpace[3] = vec4(vec2( gl_WorkGroupID.x + 1, gl_WorkGroupID.y + 1 ) * 32, -1.0, 1.0);

	vec3 viewSpace[4];
	// Now convert the screen space points to view space
	viewSpace[0] = screenToView(screenSpace[0]).xyz;
	viewSpace[1] = screenToView(screenSpace[1]).xyz;
	viewSpace[2] = screenToView(screenSpace[2]).xyz;
	viewSpace[3] = screenToView(screenSpace[3]).xyz;

	// Now build the frustum planes from the view space points
	uint index = 0;
	planes[index] = computePlane(eyePos, viewSpace[2], viewSpace[0]); // Left plane
	planes[index + 1] = computePlane(eyePos, viewSpace[1], viewSpace[3]); // Right plane
	planes[index + 2] = computePlane(eyePos, viewSpace[0], viewSpace[1]); // Top plane
	planes[index + 3] = computePlane(eyePos, viewSpace[3], viewSpace[2]); // Bottom plane
}